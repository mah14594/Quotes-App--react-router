{"version":3,"sources":["components/UI/Card.js","components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/quotes/QuoteForm.js","Pages/NewQuote.js"],"names":["Card","props","className","classes","card","children","module","exports","QuoteForm","authorInputRef","useRef","textInputRef","useState","FormisFocused","setFormisFocused","when","message","location","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","history","useHistory","useHttp","addQuote","sendRequest","status","useEffect","push","qouteData","console","log"],"mappings":"mIAAA,4BAMeA,IAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,a,mBCF9CC,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,iJC6DtHC,EAxDG,SAACP,GACjB,IAAMQ,EAAiBC,mBACjBC,EAAeD,mBACrB,EAA0CE,oBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAgBA,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CACEC,KAAMF,EACNG,QAAS,SAACC,GAAD,MAAc,qCAEzB,cAACjB,EAAA,EAAD,UACE,uBACEkB,QAdkB,WACxBJ,GAAiB,IAcXZ,UAAWC,IAAQgB,KACnBC,SAzBR,SAA2BC,GACzBA,EAAMC,iBACN,IAAMC,EAAgBd,EAAee,QAAQC,MACvCC,EAAcf,EAAaa,QAAQC,MAIzCxB,EAAM0B,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAe5C,UAKGzB,EAAM6B,WACL,qBAAK5B,UAAWC,IAAQ4B,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK9B,UAAWC,IAAQ8B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK5B,OAEtC,sBAAKP,UAAWC,IAAQ8B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAK1B,OAEpC,qBAAKT,UAAWC,IAAQoC,QAAxB,SACE,wBAAQC,QA9BQ,WACxB1B,GAAiB,IA6B2BZ,UAAU,MAA9C,kC,gBC/CG,SAASuC,IACtB,IAAMC,EAAUC,cAChB,EAAgCC,YAAQC,KAAU,GAA1CC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACrBC,qBAAU,WACO,cAAXD,GACFL,EAAQO,KAAK,aAEd,CAACF,EAAQL,IAMZ,OACE,cAAC,EAAD,CAAWZ,UAAsB,YAAXiB,EAAsBpB,WANtB,SAACuB,GACvBC,QAAQC,IAAIF,GACZJ,EAAYI","file":"static/js/6.d88bc646.chunk.js","sourcesContent":["import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3Ubc4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3V1pT\",\"loading\":\"QuoteForm_loading__V6ivv\",\"control\":\"QuoteForm_control__3KwYx\",\"actions\":\"QuoteForm_actions__ME7i4\"};","import { Fragment, useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom\";\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n  const [FormisFocused, setFormisFocused] = useState(false);\n  function submitFormHandler(event) {\n    event.preventDefault();\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n  const formfocusdHandler = () => {\n    setFormisFocused(true);\n  };\n  const StoppromptHanlder = () => {\n    setFormisFocused(false);\n  };\n  return (\n    <Fragment>\n      <Prompt\n        when={FormisFocused}\n        message={(location) => \"Are you sure you want to leave?\"} //location may be a specific path for this prompt component\n      />\n      <Card>\n        <form\n          onFocus={formfocusdHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={StoppromptHanlder} className=\"btn\">\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { addQuote } from \"../lib/api\";\r\nexport default function NewQuote() {\r\n  const history = useHistory();\r\n  const { sendRequest, status } = useHttp(addQuote, false);\r\n  useEffect(() => {\r\n    if (status === \"completed\") {\r\n      history.push(\"/Quotes\"); //.replace => prevent user from going back to the previous page!\r\n    }\r\n  }, [status, history]);\r\n  const AddQouteHandler = (qouteData) => {\r\n    console.log(qouteData);\r\n    sendRequest(qouteData);\r\n  };\r\n\r\n  return (\r\n    <QuoteForm isLoading={status === \"pending\"} onAddQuote={AddQouteHandler} />\r\n  );\r\n}\r\n"],"sourceRoot":""}